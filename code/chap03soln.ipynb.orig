{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
<<<<<<< HEAD
    "# Small World Graphs\n",
    "\n",
    "Code examples from [Think Complexity, 2nd edition](http://greenteapress.com/wp/complexity2), Chapter 3\n",
    "\n",
    "Copyright 2016 Allen Downey, [MIT License](http://opensource.org/licenses/MIT)"
=======
    "# Think Bayes: Chapter 3\n",
    "\n",
    "This notebook presents example code and exercise solutions for Think Bayes.\n",
    "\n",
    "Copyright 2016 Allen B. Downey\n",
    "\n",
    "MIT License: https://opensource.org/licenses/MIT"
>>>>>>> c09e7285de4dcdfd1011452d913f287800cd5c75
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
<<<<<<< HEAD
    "collapsed": false
=======
    "collapsed": true
>>>>>>> c09e7285de4dcdfd1011452d913f287800cd5c75
   },
   "outputs": [],
   "source": [
    "from __future__ import print_function, division\n",
    "\n",
<<<<<<< HEAD
    "%matplotlib inline\n",
    "\n",
    "import warnings\n",
    "warnings.filterwarnings('ignore')\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import networkx as nx\n",
    "import numpy as np\n",
    "\n",
    "import thinkplot\n",
    "\n",
    "# colors from our friends at http://colorbrewer2.org\n",
    "COLORS = ['#8dd3c7','#ffffb3','#bebada','#fb8072','#80b1d3','#fdb462',\n",
    "          '#b3de69','#fccde5','#d9d9d9','#bc80bd','#ccebc5','#ffed6f']"
=======
    "% matplotlib inline\n",
    "\n",
    "import thinkplot\n",
    "from thinkbayes2 import Hist, Pmf, Suite, Cdf"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## The Dice problem\n",
    "\n",
    "Suppose I have a box of dice that contains a 4-sided die, a 6-sided\n",
    "die, an 8-sided die, a 12-sided die, and a 20-sided die.\n",
    "\n",
    "Suppose I select a die from the box at random, roll it, and get a 6.\n",
    "What is the probability that I rolled each die?\n",
    "\n",
    "The `Dice` class inherits `Update` and provides `Likelihood`"
>>>>>>> c09e7285de4dcdfd1011452d913f287800cd5c75
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
<<<<<<< HEAD
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "from thinkstats2 import RandomSeed\n",
    "RandomSeed(17)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Regular ring lattice"
=======
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "class Dice(Suite):\n",
    "    def Likelihood(self, data, hypo):\n",
    "        if hypo < data:\n",
    "            return 0\n",
    "        else:\n",
    "            return 1/hypo"
>>>>>>> c09e7285de4dcdfd1011452d913f287800cd5c75
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
<<<<<<< HEAD
    "To make a ring lattice, I'll start with a generator function that yields edges between each node and the next `halfk` neighbors."
=======
    "Here's what the update looks like:"
>>>>>>> c09e7285de4dcdfd1011452d913f287800cd5c75
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
<<<<<<< HEAD
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def adjacent_edges(nodes, halfk):\n",
    "    \"\"\"Yields edges between each node and `halfk` neighbors.\n",
    "    \n",
    "    halfk: number of edges from each node\n",
    "    \"\"\"\n",
    "    n = len(nodes)\n",
    "    for i, u in enumerate(nodes):\n",
    "        for j in range(i+1, i+halfk+1):\n",
    "            v = nodes[j % n]\n",
    "            yield u, v"
=======
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "4 0.0\n",
      "6 0.392156862745\n",
      "8 0.294117647059\n",
      "12 0.196078431373\n",
      "20 0.117647058824\n"
     ]
    }
   ],
   "source": [
    "suite = Dice([4, 6, 8, 12, 20])\n",
    "suite.Update(6)\n",
    "suite.Print()"
>>>>>>> c09e7285de4dcdfd1011452d913f287800cd5c75
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
<<<<<<< HEAD
    "We can test it with 3 nodes and `halfk=1`"
=======
    "And here's what it looks like after more data:"
>>>>>>> c09e7285de4dcdfd1011452d913f287800cd5c75
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
<<<<<<< HEAD
      "(0, 1)\n",
      "(1, 2)\n",
      "(2, 0)\n"
=======
      "4 0.0\n",
      "6 0.0\n",
      "8 0.943248453672\n",
      "12 0.0552061280613\n",
      "20 0.0015454182665\n"
>>>>>>> c09e7285de4dcdfd1011452d913f287800cd5c75
     ]
    }
   ],
   "source": [
<<<<<<< HEAD
    "nodes = range(3)\n",
    "for edge in adjacent_edges(nodes, 1):\n",
    "    print(edge)"
=======
    "for roll in [6, 8, 7, 7, 5, 4]:\n",
    "        suite.Update(roll)\n",
    "        \n",
    "suite.Print()"
>>>>>>> c09e7285de4dcdfd1011452d913f287800cd5c75
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
<<<<<<< HEAD
    "Now we use `adjacent_edges` to write `make_ring_lattice`"
=======
    "## The train problem\n",
    "\n",
    "The Train problem has the same likelihood as the Dice problem."
>>>>>>> c09e7285de4dcdfd1011452d913f287800cd5c75
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
<<<<<<< HEAD
    "def make_ring_lattice(n, k):\n",
    "    \"\"\"Makes a ring lattice with `n` nodes and degree `k`.\n",
    "    \n",
    "    Note: this only works correctly if k is even.\n",
    "    \n",
    "    n: number of nodes\n",
    "    k: degree of each node\n",
    "    \"\"\"\n",
    "    G = nx.Graph()\n",
    "    nodes = range(n)\n",
    "    G.add_nodes_from(nodes)\n",
    "    G.add_edges_from(adjacent_edges(nodes, k//2))\n",
    "    return G"
=======
    "class Train(Suite):\n",
    "    def Likelihood(self, data, hypo):\n",
    "        if hypo < data:\n",
    "            return 0\n",
    "        else:\n",
    "            return 1/hypo"
>>>>>>> c09e7285de4dcdfd1011452d913f287800cd5c75
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
<<<<<<< HEAD
    "And we can test it out with `n=10` and `k=4`"
=======
    "But there are many more hypotheses"
>>>>>>> c09e7285de4dcdfd1011452d913f287800cd5c75
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
<<<<<<< HEAD
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "lattice = make_ring_lattice(10, 4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
=======
>>>>>>> c09e7285de4dcdfd1011452d913f287800cd5c75
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
<<<<<<< HEAD
      "image/png": "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\ngg==\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7fe800dc7240>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "nx.draw_circular(lattice, \n",
    "                 node_color=COLORS[0], \n",
    "                 node_size=1000, \n",
    "                 with_labels=True)\n",
    "plt.savefig('chap03-1.pdf')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Exercise:** To see how this function fails when `k` is odd, run it again with `k=2` or `k=5`."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "## WS graph"
=======
      "text/plain": [
       "0.0028222671142652746"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "hypos = xrange(1, 1001)\n",
    "suite = Train(hypos)\n",
    "suite.Update(60)"
>>>>>>> c09e7285de4dcdfd1011452d913f287800cd5c75
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
<<<<<<< HEAD
    "To make a WS, you start with a ring lattice and then rewire."
=======
    "Here's what the posterior looks like"
>>>>>>> c09e7285de4dcdfd1011452d913f287800cd5c75
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 8,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "def make_ws_graph(n, k, p):\n",
    "    \"\"\"Makes a Watts-Strogatz graph.\n",
    "    \n",
    "    n: number of nodes\n",
    "    k: degree of each node\n",
    "    p: probability of rewiring an edge\n",
    "    \"\"\"\n",
    "    ws = make_ring_lattice(n, k)\n",
    "    rewire(ws, p)\n",
    "    return ws"
=======
   "execution_count": 7,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\nUIiISEz/H9A74l46ILnTAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7faa380fd090>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "thinkplot.Pdf(suite)"
>>>>>>> c09e7285de4dcdfd1011452d913f287800cd5c75
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
<<<<<<< HEAD
    "Here's the function that does the rewiring"
=======
    "And here's how we can compute the posterior mean"
>>>>>>> c09e7285de4dcdfd1011452d913f287800cd5c75
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 9,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "from numpy.random import choice\n",
    "\n",
    "def rewire(G, p):\n",
    "    \"\"\"Rewires each edge with probability `p`.\n",
    "    \n",
    "    G: Graph\n",
    "    p: float\n",
    "    \"\"\"\n",
    "    nodes = set(G.nodes())\n",
    "    for edge in G.edges():\n",
    "        if flip(p):\n",
    "            u, v = edge\n",
    "            choices = nodes - {u} - set(G[u])\n",
    "            new_v = choice(tuple(choices))\n",
    "            G.remove_edge(u, v)\n",
    "            G.add_edge(u, new_v)\n",
    "            \n",
    "def flip(p):\n",
    "    \"\"\"Returns True with probability `p`.\"\"\"\n",
    "    return np.random.random() < p"
=======
   "execution_count": 8,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "333.41989326371095"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def Mean(suite):\n",
    "    total = 0\n",
    "    for hypo, prob in suite.Items():\n",
    "        total += hypo * prob\n",
    "    return total\n",
    "\n",
    "Mean(suite)"
>>>>>>> c09e7285de4dcdfd1011452d913f287800cd5c75
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
<<<<<<< HEAD
    "Here's an example with `p=0.2`"
=======
    "Or we can just use the method"
>>>>>>> c09e7285de4dcdfd1011452d913f287800cd5c75
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 10,
=======
   "execution_count": 9,
>>>>>>> c09e7285de4dcdfd1011452d913f287800cd5c75
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
<<<<<<< HEAD
      "image/png": "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\nMSGEEMKh/wNjMLJOgXXbwwAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7fe7feb24780>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "ws = make_ws_graph(10, 4, 0.2)\n",
    "nx.draw_circular(ws, \n",
    "                 node_color=COLORS[1], \n",
    "                 node_size=1000, \n",
    "                 with_labels=True)"
=======
      "text/plain": [
       "333.41989326371095"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "suite.Mean()"
>>>>>>> c09e7285de4dcdfd1011452d913f287800cd5c75
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
<<<<<<< HEAD
    "Just checking that we have the same number of edges we started with:"
=======
    "## Sensitivity to the prior\n",
    "\n",
    "Here's a function that solves the train problem for different priors and data"
>>>>>>> c09e7285de4dcdfd1011452d913f287800cd5c75
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 11,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(20, 20)"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(lattice.edges()), len(ws.edges())"
=======
   "execution_count": 10,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def MakePosterior(high, dataset, constructor=Train):\n",
    "    \"\"\"Solves the train problem.\n",
    "    \n",
    "    high: int maximum number of trains\n",
    "    dataset: sequence of observed train numbers\n",
    "    constructor: function used to construct the Train object\n",
    "    \n",
    "    returns: Train object representing the posterior suite\n",
    "    \"\"\"\n",
    "    hypos = range(1, high+1)\n",
    "    suite = constructor(hypos)\n",
    "\n",
    "    for data in dataset:\n",
    "        suite.Update(data)\n",
    "\n",
    "    return suite"
>>>>>>> c09e7285de4dcdfd1011452d913f287800cd5c75
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
<<<<<<< HEAD
    "Now I'll generate a plot that shows WS graphs for a few values of `p`"
=======
    "Let's run it with the same dataset and several uniform priors"
>>>>>>> c09e7285de4dcdfd1011452d913f287800cd5c75
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 12,
=======
   "execution_count": 11,
>>>>>>> c09e7285de4dcdfd1011452d913f287800cd5c75
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
<<<<<<< HEAD
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAA4kAAAGpCAYAAAAgHXNKAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAIABJREFUeJzs3XdYU2cbBvDH0WG/gqIhDBER90YQF+49qqhI3dZt3bXO\nOuuos66KVatVodZVcdS9ldYtinVvsQIqTvYIub8/vExVVkIW4/5dV/9ocs57nhwPd/Ik55w3FwAI\nERERERERkYjkNncBRERERERElHmwSSQiIiIiIiINNolERERERESkwSaRiIiIiIiINNgkEhERERER\nkQabRCIiIiIiItJgk0hEREREREQabBKJiIiIiIhIg00iERERERERabBJJCIiIiIiIg02iURERERE\nRKTBJpGIiIiIiIg02CQSERERERGRBptEIiIiIiIi0mCTSERERERERBpsEomIiIiIiEiDTSIRERER\nERFpsEkkIiIiIiIiDTaJREREREREpMEmkYiIiIiIiDTYJBIREREREZEGm0QiIiIiIiLSYJNIRERE\nREREGmwSiYiIiIiISINNIhEREREREWmwSSQiIiIiIiINNolERERERESkwSaRiIiIiIiINNgkEhER\nERERkQabRCIiIiIiItJgk0hEREREREQabBKJiIiIiIhIg00iERERERERabBJJCIiIiIiIg02iURE\nRERERKTBJpGIiIiIiIg02CQSERERERGRBptEIiIiIiIi0mCTSERERERERBpsEomIiIiIiEiDTSIR\nERERERFpsEkkIiIiIiIiDTaJREREREREpMEmkYiIiIiIiDTYJBIREREREZEGm0QiIiIiIiLSYJNI\nREREREREGmwSiYiIiIiISINNIhEREREREWmwSSQiIiIiIiINNolERERERESkwSaRiIiIiIiINNgk\nEhERERERkQabRCIiIiIiItJgk0hEREREREQabBKJiIiIiIhIg00iERERERERabBJJCIiIiIiIg02\niURERERERKTBJpGIiIiIiIg02CQSERERERGRBptEIiIiIiIi0mCTSERERERERBpsEomIiIiIiEiD\nTSIRERERERFpsEkkIiIiIiIiDTaJREREREREpMEmkYiIiIiIiDTYJBIREREREZEGm0QiIiIiIiLS\nYJNIREREREREGmwSiYiIiIiISINNIhEREREREWmwSSQiIiIiIiINNolERERERESkwSaRiIiIiIiI\nNNgkEhERERERkQabRCIiIiIiItJgk0hEREREREQabBKJiIiIiIhIg00iERERERERabBJJCIiIiIi\nIg02iURERERERKTBJpGIiIiIiIg02CQSERERERGRBptEIiIiIiIi0mCTSERERERERBpsEomIiIiI\niEiDTSIRERERERFpsEkkIiIiIiIiDTaJREREREREpMEmkYiIiIiIiDTYJBIREREREZEGm0QiIiIi\nIiLSYJNIREREREREGmwSiYiIiIiISINNIhEREREREWmwSSQiIiIiIiINNolERERERESkwSaRiIiI\niIiINNgkEhERERERkQabRCIiIiIiItJgk0hEREREREQabBKJiIiIiIhIg00iERERERERabBJJCIi\nIiIiIg02iURERERERKTBJpGIiIiIiIg02CQSERERERGRBptE0lpUVJTcunVLoqKizF2KSeS010uU\nmeW0v8ec9nqJMrOc9veY014vpYxNIqVLpVLJ6KFDpYhSKa3c3KSIUimjhw4VlUpl7tKMIqe9XqLM\nLKf9Pea010uUmeW0v8ec9nopbWwSKV3fjRghl1avlmuxsXI7KkquxcbKpdWr5bsRI8xdmlHktNdL\nlJnltL/HnPZ6iTKznPb3mNNeL6UtFwCYuwjKvKKioqSIUinXYmPF7p3Hw0SkfL588vDpU/n888/N\nVZ7BRUVFSRFra7kWF5cjXi9RZsb8eSO7vl6izCxH5k8Oer2UvrzmLoAyt9DQUFHkyfNeYIiI2InI\nx7GxYmFhYY6yjMpGJMXXWyhPHgkNDZVSpUqZoSqinIf58wbzh8j0mD9vMH9yLp5uSmmKj4+XkOho\nCfvg8TARif34Y2nRooVYWFhIixYt5Ndff5Vnz54JgCzxX0hIiPj4+EiDBg0kf/788uWXX4qvr6/E\nf/ppiq/3mUol9vb2ptnxRMT8eef1Mn+ITCut/InJm1devXpl9hwx1H9xcXEycOBAeZ0rF/OHNNgk\nUqo2bNggDRs2lDJlyoj3O8ERJiJfffaZ9O/fX/bs2SMhISHSo0cP2bt3rzg7O0vjxo1l2bJl8vjx\nY3OWn6Lg4GBZsGCBeHh4SIUKFeTMmTMyfPhwCQsLk02bNkmPHj2kb9++8tVnn733ejvlySO5c+eW\nEydOmLN8ohyD+fMG84fI9N7mj4eHh3R/54ubMBH5MlcuUVhbi6enpzx69MicZRrEzZs3pUaNGvL4\n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\n8pJhw4YZ9PWWKVNGTp8+LefPn5eSJUtKnz59JCoqKs11RMRs/z5p/ZeUlCQnT56UkSNHipOTkxQv\nXlzGjBmgiqZtAAAgAElEQVQjR48elZiPPmL+GBCbRCP7/PPPpW+fPtL90081B26YiHz12WfSp08f\nvX76VqvV8tVXX0nfvn2lXr16BqmXTK9jx45St25dGTp0qN5jvT3evvrsM4Mfb5T1pJU//fr1k+XL\nl8vDhw9l9erVEhcXJ+3bt5cSJUrImDFj5MyZM2k2jMyf7IH5Q8ZizM8/+vL395f27dsb5Jey48eP\nS5UqVaR48eJy6tQpvX6typUrl6xcuVK2b98uO3fu1Ls2kTensUZFRYm7u7u4ublJYGCgqFQqcXNz\nk6CgIINsw9iSkpLk+PHjMmzYMHF0dJQ+ffpIvnz5ZPv27XL79m2ZM2eOODk5SZ48eTLl8ZZlgYwu\nMTERdatXx+d588JGBFYGutvSvHnzUKtWLd61KRuIiopC6dKlsW7dOr3Hens3Oat8+WAjAsuPPuLd\nvXIwXfJHrVYjMDAQ48ePR+nSpVGkSBEMHz4cAQEBUKlU7y3L/Mk+mD9kLO/mT4nPPzfY5x99VaxY\nEQEBAXqNkZiYiEmTJsHW1hZ79uwxUGVv/PXXX7CxsUFISIjeY02bNg3Dhg1L9vi6deugUCiwePHi\nFG/eY+4WISEhAfv370f//v2hVCrh4uKC6dOn49q1a8mWTUxMRM2aNTFnzhxN/mSm4y2rYpNoIpUr\nV8bevXshIgaZt+Xs2bOwtrbGgwcPDFAdZQYXLlyAQqHAnTt3DDJeZGQkRARNmzY1yHiUdWUkf9Rq\nNa5cuYKpU6eiUqVKsLW1xddff42DBw/i5MmTzJ9shvlDxvI2fzLLvHW3bt2Cra1tsi++dPHgwQPU\nqlULTZo0QVhYmAGr+8/UqVPRoEEDveoE3uz/1KYbuXPnDtzd3dGqVSs8ffr0vefM0STGxcVh586d\n6NmzJwoWLIhq1aphzpw56ebSxIkT0axZM83dmjlPomGwSTSB27dvw8bGBiqVyiB/dBEREShRogQ2\nb95sgOooM1m0aBHc3d0RHx9vkPFEBJaWlnj16pVBxqOsx1D5c+vWLcyaNQtVqlRB7ty50aBBA+ze\nvRtxcXEGrJbMiflDhvZu/mQWs2bNwsCBAzO8/h9//AFra2vMnTtXrylk0qNSqVC3bl3MnDkzw2Pc\n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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7fe7fed7f6a0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "n = 10\n",
    "k = 4\n",
    "ns = 40\n",
    "\n",
    "thinkplot.preplot(cols=3)\n",
    "ws = make_ws_graph(n, k, 0)\n",
    "nx.draw_circular(ws, node_size=ns)\n",
    "thinkplot.config(axis='equal')\n",
    "\n",
    "thinkplot.subplot(2)\n",
    "ws = make_ws_graph(n, k, 0.2)\n",
    "nx.draw_circular(ws, node_size=ns)\n",
    "thinkplot.config(axis='equal')\n",
    "\n",
    "thinkplot.subplot(3)\n",
    "ws = make_ws_graph(n, k, 1.0)\n",
    "nx.draw_circular(ws, node_size=ns)\n",
    "thinkplot.config(axis='equal')\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.subplots_adjust(wspace=0, hspace=0, left=0, right=1)\n",
    "plt.savefig('chap03-2.pdf')"
=======
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "500 151.849587959\n",
      "1000 164.305586423\n",
      "2000 171.338181092\n"
     ]
    }
   ],
   "source": [
    "dataset = [30, 60, 90]\n",
    "\n",
    "for high in [500, 1000, 2000]:\n",
    "    suite = MakePosterior(high, dataset)\n",
    "    print(high, suite.Mean())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The results are quite sensitive to the prior, even with several observations."
>>>>>>> c09e7285de4dcdfd1011452d913f287800cd5c75
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
<<<<<<< HEAD
    "**Exercise:** What is the order of growth of `rewire`?"
=======
    "## Power law prior\n",
    "\n",
    "Now let's try it with a power law prior."
>>>>>>> c09e7285de4dcdfd1011452d913f287800cd5c75
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 13,
=======
   "execution_count": 12,
>>>>>>> c09e7285de4dcdfd1011452d913f287800cd5c75
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
<<<<<<< HEAD
    "# Solution\n",
    "\n",
    "\"\"\"The loop executes once for each edge.  Inside the loop, everything is constant\n",
    "time except computing `choices`, which is linear in `n`.  So the total run time is \n",
    "`O(nm)`.\"\"\";"
=======
    "class Train2(Train):\n",
    "\n",
    "    def __init__(self, hypos, alpha=1.0):\n",
    "        Pmf.__init__(self)\n",
    "        for hypo in hypos:\n",
    "            self[hypo] = hypo**(-alpha)\n",
    "        self.Normalize()"
>>>>>>> c09e7285de4dcdfd1011452d913f287800cd5c75
   ]
  },
  {
   "cell_type": "markdown",
<<<<<<< HEAD
   "metadata": {
    "collapsed": true
   },
   "source": [
    "## Clustering"
=======
   "metadata": {},
   "source": [
    "Here's what a power law prior looks like, compared to a uniform prior"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\nP/3fX0VG0qG+AAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7faa0a9f9b50>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "high = 100\n",
    "hypos = range(1, high+1)\n",
    "suite1 = Train(hypos)\n",
    "suite2 = Train2(hypos)\n",
    "thinkplot.Pdf(suite1)\n",
    "thinkplot.Pdf(suite2)\n"
>>>>>>> c09e7285de4dcdfd1011452d913f287800cd5c75
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
<<<<<<< HEAD
    "The following function computes the local clustering coefficient for a given node, `u`:"
=======
    "Now let's see what the posteriors look like after observing one train."
>>>>>>> c09e7285de4dcdfd1011452d913f287800cd5c75
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
<<<<<<< HEAD
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def node_clustering(G, u):\n",
    "    \"\"\"Computes local clustering coefficient for `u`.\n",
    "    \n",
    "    G: Graph\n",
    "    u: node\n",
    "    \n",
    "    returns: float\n",
    "    \"\"\"\n",
    "    neighbors = G[u]\n",
    "    k = len(neighbors)\n",
    "    if k < 2:\n",
    "        return 0\n",
    "        \n",
    "    total = k * (k-1) / 2\n",
    "    exist = 0    \n",
    "    for v, w in all_pairs(neighbors):\n",
    "        if G.has_edge(v, w):\n",
    "            exist +=1\n",
    "    return exist / total\n",
    "\n",
    "def all_pairs(nodes):\n",
    "    \"\"\"Generates all pairs of nodes.\"\"\"\n",
    "    for i, u in enumerate(nodes):\n",
    "        for j, v in enumerate(nodes):\n",
    "            if i < j:\n",
    "                yield u, v"
=======
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7faa0aa81250>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "dataset = [60]\n",
    "high = 1000\n",
    "\n",
    "thinkplot.PrePlot(num=2)\n",
    "\n",
    "constructors = [Train, Train2]\n",
    "labels = ['uniform', 'power law']\n",
    "\n",
    "for constructor, label in zip(constructors, labels):\n",
    "    suite = MakePosterior(high, dataset, constructor)\n",
    "    suite.label = label\n",
    "    thinkplot.Pmf(suite)\n",
    "\n",
    "thinkplot.Config(xlabel='Number of trains',\n",
    "                 ylabel='Probability')"
>>>>>>> c09e7285de4dcdfd1011452d913f287800cd5c75
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
<<<<<<< HEAD
    "The network average clustering coefficient is just the mean of the local CCs."
=======
    "The power law gives less prior probability to high values, which yields lower posterior means, and less sensitivity to the upper bound."
>>>>>>> c09e7285de4dcdfd1011452d913f287800cd5c75
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "collapsed": false
   },
<<<<<<< HEAD
   "outputs": [],
   "source": [
    "def clustering_coefficient(G):\n",
    "    \"\"\"Average of the local clustering coefficients.\n",
    "    \n",
    "    G: Graph\n",
    "    \n",
    "    returns: float\n",
    "    \"\"\"\n",
    "    cc = np.mean([node_clustering(G, node) for node in G])\n",
    "    return cc"
=======
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "500 130.708469863\n",
      "1000 133.275231375\n",
      "2000 133.997463081\n"
     ]
    }
   ],
   "source": [
    "dataset = [30, 60, 90]\n",
    "\n",
    "for high in [500, 1000, 2000]:\n",
    "    suite = MakePosterior(high, dataset, Train2)\n",
    "    print(high, suite.Mean())"
>>>>>>> c09e7285de4dcdfd1011452d913f287800cd5c75
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
<<<<<<< HEAD
    "In a ring lattice with `k=4`, the clustering coefficient for each node should be 0.5"
=======
    "## Credible intervals\n",
    "\n",
    "To compute credible intervals, we can use the `Percentile` method on the posterior."
>>>>>>> c09e7285de4dcdfd1011452d913f287800cd5c75
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
<<<<<<< HEAD
       "0.5"
=======
       "(69, 869)"
>>>>>>> c09e7285de4dcdfd1011452d913f287800cd5c75
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
<<<<<<< HEAD
    "lattice = make_ring_lattice(10, 4)\n",
    "node_clustering(lattice, 1)"
=======
    "hypos = xrange(1, 1001)\n",
    "suite = Train(hypos)\n",
    "suite.Update(60)\n",
    "\n",
    "suite.Percentile(5), suite.Percentile(95)"
>>>>>>> c09e7285de4dcdfd1011452d913f287800cd5c75
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
<<<<<<< HEAD
    "And the network average should be 0.5"
=======
    "If you have to compute more than a few percentiles, it is more efficient to compute a CDF.\n",
    "\n",
    "Also, a CDF can be a better way to visualize distributions."
>>>>>>> c09e7285de4dcdfd1011452d913f287800cd5c75
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
<<<<<<< HEAD
      "text/plain": [
       "0.5"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clustering_coefficient(lattice)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Correct."
=======
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAYwAAAEPCAYAAABRHfM8AAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAIABJREFUeJzt3XmYFNXVx/HvQTZRUNxwAVHBJcGgoqCihsFEQSW4K+CK\ne4wagxvmjYq+JopL1MT4uuFGENwj7ogyGqMCgoiJbEpENsWoEESWAc77RxXQPTPdUwNdXb38Ps/D\nQ99bt6pOlzhnqm7de83dERERqUuDpAMQEZHioIQhIiKRKGGIiEgkShgiIhKJEoaIiESihCEiIpHE\nmjDMbIiZfWVmk7O0+ZOZzTCzSWa2d5zxiIjI+ov7DuNhoEemjWZ2BNDO3XcFzgfujTkeERFZT7Em\nDHd/B/guS5OjgcfCtmOBzcysVZwxiYjI+km6D2MHYHZKeW5YJyIiBSbphCEiIkWiYcLnnwu0SSm3\nDutqMDNNeiUish7c3XJxnHwkDAv/1GYk8CvgCTM7AFjo7l9lOpAmSgwMGjSIQYMGJR1GQdC1WEfX\nYp1SuRbuzpSZX/LUqxOYPH1OvfZt2HAjenX7CacffWDO4ok1YZjZ40AFsKWZfQFcBzQG3N3vd/eX\nzexIM/sUWAL0jzMeEZFC5u7869N5PPHKB3zy2fx67bvl5ptw3M870a3zrmzctPHa+tNzGF+sCcPd\n+0Voc1GcMYiIFCp3Z+rMLxnxynj+OWNevfZts21Ljj+sEwfuvQsNG24UU4Tpku7DkPVQUVGRdAgF\nQ9diHV2LdQr1Wrg7M2f/hyde+YAJn8yq177td9yG4w/vxH4ddqRBg2TeV7Ji6RcwMy+WWEVE1pi3\nYCFPvjqBv0+YUa/9dtupFSf22Jd9ftQGs/Xvszazour0FhEpG4sWL+W50R/yQmXGGZFqtWvbbTix\nx750+vGOG5Qg4qSEISKyAZavqOL1d6fw5KsTWLJ0eeT92m6/JSf22Jf9O+6U2COm+lLCEBGpB3dn\n4idf8PhL4/l87n8i77fNFs05qed+HLJv+7x1UueaEoaISB3mf72I4S+P5x8TP428z8ZNG3Nij33p\ncdCPadqkUYzR5Y8ShohINSuqVvLy2/9k6Mj367XfkT/dk+MP78TmzZvFFFmylDBEpOy5O598Np/H\nnn+fT79YEHm/fX7UhlN/sT9tt9+yYDuqc0kJQ0TK0vc/LOe50R/ytzcmRd5n65bNOeOYA4uqozqX\nlDBEpGx8PH0uDz37D76Y/23kfU44vBO/6L4XmzZrEmNkxUEJQ0RK1rLlVTwzaiLPjv4w8j4dd2vN\nqb/Yn3Y7bh1jZMVJCUNESsq/5/yHh579R+TJ+5o0bkS/ozrT46AONGpUnK+75osShogUtdWrV/Pm\n2Gnc/9TfWbVqdaR99vlRG844pitttm0Zc3SlRQlDRIrO4iXLGPbiWF5/d0rkffof21V3ERtICUNE\nisKsed/wwFPvMGVmtEdNe+yyLf2P6Ur7ttvEHFn5UMIQkYLk7oz/5yzuGV7J4iXLIu3Tq1tHTj5i\nP5pt3LjuxlJvShgiUjBWrlzFK3//F4/87d1I7Zs2acQvT+7GQZ3alcXAuaQpYYhIopYtr+Lp1ybw\nXMQBdHvssi3nHH8wO7feKubIpDolDBHJu8VLlvHwc+/y1vjpkdpXdNmdM44+gBabbhxzZJKNEoaI\n5MU3C7/n4efe471Jn0Vq3+fIzhxz6N56q6mAKGGISGy+Wfg99wx/i0lTZ9fZtkGDBlzYpxvdOu9a\nlvM0FQMlDBHJqXkLFnLx70dEatt8k6ZcfEr3gl6WVNZRwhCRDbbg28X88vphkdpuu1ULLj7lUPbY\nZduYo5JcU8IQkfWyaPFSzvrdo5Hatm7VkotP6a5BdEVOCUNEIlu2vIpTrhwSuf0NF/emQ/vtY4xI\n8kkJQ0SycncGDH4q8hoSv7vgKPb5UZuYo5IkKGGISK3uf/LvvPaPf0Vqe3n/wzlw711ijkiSpoQh\nImu9M+FT7nhsdKS25514CD0O7hBzRFJIlDBEytz8rxdx0Y3DI7Xt1a0j/Y/rGnNEUqiUMETK0MqV\nqzj96kdYvqKqzra777wtv//10RonIUoYIuXk8RfH8czrEyO1HXbL2TRt0ijmiKSYKGGIlLhZ875l\nwOAnI7W9Y+BJ7LjdFjFHJMVKCUOkBLk7Z1/zGIsWL62zrTqvJSolDJES8vYH07lr6Jt1tmvXZmsG\nX3ac+iWkXpQwRIrciqqV9L38wUht77/+VLbcfNOYI5JSpYQhUqReGDM50lKmZx9/EEf+9Cd5iEhK\nXewJw8x6AncCDYAh7j642vYWwF+BHYGNgNvd/ZG44xIpRstXVNHvirrncmrQoAHDbz2bhg21+JDk\njrl7fAc3awBMB34GzAPGA33cfWpKm6uBFu5+tZltBUwDWrn7ymrH8jhjFSlkY8ZO4+7Hx9TZ7toL\ne7HX7q3zEJEUCzPD3XPSWRX3HUYXYIa7zwIwsxHA0cDUlDYONA8/Nwe+qZ4sRMrR6tWrOXnAA6yu\n4xel7bfejD/9Tx91YEvs4k4YOwCpazPOIUgiqe4GRprZPGBT4OSYYxIpaJ/OWsBVf3y2znb/e8nR\n/LjddnmISCRQCJ3ePYAP3f1QM2sHvG5mHd39++oNBw0atPZzRUUFFRUVeQtSJG5/HjaGynHTsrZp\nsenGPHTj6bqbkIwqKyuprKyM5dhx92EcAAxy955heSDgqR3fZvYicJO7/yMsvwFc5e4fVDuW+jCk\n5ER9Jfay/ofRde92eYhISk0x9WGMB9qbWVtgPtAH6FutzSzg58A/zKwVsBswM+a4RBIV9bGT5nOS\nQhJrwnD3VWZ2ETCKda/VTjGz84PNfj9wI/CImU0Od7vS3aMt7SVSZIa/NI6nR2Wf/O/nB/6IX/bp\nlqeIRKKL9ZFULumRlBQrd+eca4aycPEPWdsNHnAc7dtuk6eopFwU0yMpkbK1dNkKTr3qoTrbjbjt\nXBo10gA7KXxKGCI5NnfBQi75/Yisbbr8ZCeuOqdnniISyQ0lDJEcGffx5wx+8NWsbQaceRgH7aO3\nnaQ4KWGIbKCnR01k+Evjsra559p+tNqyRZ4iEomHEobIerpr6Bu8/cGMrG2G33YOjRvpfzMpDfqX\nLFJPA//4LDNmLci4fdNmTXjkD2dqNLaUHCUMkQjcnXOvHcp3/838aqw6sqXU1ZkwzGwC8BDwuLt/\nF39IIoXD3el7+YNUrVyVsc0JPfal75Gd8xiVSDLqHLhnZu2B/gSzyH4APAyMyvcoOg3ck3xyd04a\n8ACrV6/O2Oaift3pvv/ueYxKpP5yOXAv8kjvcDGkXsD/AasIEsdd+ZrGQwlD8sHdOeXKh1i+oipj\nm4Hn9qTznjvlLyiRDZD3kd5m1pHgLuNI4BlgGHAw8Cawdy4CEUnaBYOG8fV3izNuH/SrX/CT3XbI\nY0QihSVqH8ZCYAgw0N2Xh5vGmtlBcQYnkg+/u+t5psycn3H7DRf3pkP77fMYkUhhitKHsYu7z6xW\nt7O7/zvWyGrGoUdSklN/ebySN8dOzbhddxRSCvLah2FmE929U7W6Ce6+by4CiEoJQ3LlxcrJPPzc\nuxm3X33eEezXoW0eIxKJT176MMxsD6ADsJmZHZeyqQXQNBcnF8mnj6bN4YZ7Xsy4/ZJTD6Vb593y\nGJFIccnWh7E7wVtRmwO/SKlfDJwbZ1AiufT1t4u54PphGbf3PaoLJxzeKeN2EQlEeSR1oLu/l6d4\nssWhR1JSL3Wtl911n3ZcduZheYxIJP/y0odhZle6+y1m9megRiN3vyQXAUSlhCFRuTsnXnpfzX+0\noc2bN2PIjafnNSaRpORrHMaU8O8PcnEikXx4+Nl3efGtyRm3P3XHeTRo0CCPEYmUDq3pLSVh2r+/\n5Ld3/i3j9kdv6s+mzZrkMSKRwpCvt6ReoJZHUWu4e+9cBCCyIZavqKLfFUMybr/pN8ey206t8hiR\nSOnK9kjqtrxFIbIezvrdoyxavLTWbScfsR8n9dwvzxGJlDY9kpKi89b46fzpr2/Wuq1J40Y8fuvZ\neY5IpHDl65HUk+5+kpl9TPqjKQPc3TvmIgCRqJYsXc7pAx/OuH3YLWfTtEmjPEYkUl6yvVa7nbvP\nN7Na50hw91mxRlYzHt1hlLHzrhvKNwuX1Lrt+ot+wZ67as4nkdrkfT0MM9sW6EJwpzHe3b/Mxcnr\nQwmjPE2eNofrM0znsdfurbn2wl55jkikuOR78sFzgGsJ1r4woBtwg7s/lIsAolLCKC+rVq3mpAH3\nZ9w+4rZzadRoozxGJFKc8p0wpgFd3f2bsLwl8K6753VtSiWM8jHshbE8O/rDWrdpynGR+sn3invf\nEEw4uMbisE4kp7J1arfasgX3XNsvzxGJSKpsb0kNCD9+SrC63vMEfRhHA5nnXhBZD7+/72UmfvJF\nrdse+cOZNN9EM+qLJC3bHUbz8O/Pwj9rPB9fOFJuvvvvD5xzzWO1bjvh8E70PapLniMSkUw0cE8S\n8z93/Y2pM2t/4e6J28+lYUN1aotsqLz2YZjZ1sCVBKvvrX0u4O6H5iIAKT+LFi/lrN89Wuu2S0/7\nGYfst2ueIxKRKKJ0eg8DniBYfe8C4Azg6ziDktJ160OjeP+jmbVu09TjIoUtymu1E9x9XzObvGY6\nEDMb7+6d8xLhujj0SKqILVtexSlX1j6r7BVnHc4Be+2S54hEykO+X6utCv+eb2ZHAfOALaKewMx6\nAncCDYAh7j64ljYVwB1AI+Brd+8e9fhS+F4YM5lH/vZurdt0VyFSPKLcYfQC/g60Af4MtACud/eR\ndR7crAEwHfgZQaIZD/Rx96kpbTYD3gUOd/e5ZraVu/+nlmPpDqPIuDsnXHpfrdt+1beCQw/YI88R\niZSfvN5huPuaiXwWAfX9zb8LMGPNRIVmNoJgHMfUlDb9gGfcfW54vhrJQorPzNlfc8Vtz9S6TdN6\niBSnKG9J7QLcBRwIrAbeA37j7rX3XKbbAZidUp5DkERS7QY0MrMxwKbAn9x9aIRjS4G67Jan+Xxu\nzbzf46AOnHfSIQlEJCK5EKUP43HgL8CxYbkPMBzYP4cxdAIOBTYB3jOz99z90xwdX/JkRdVK+l7+\nYK3bhtx4Ops3b5bniEQkl6IkjGbVfuP/q5ldEfH4c4EdU8qtw7pUc4D/uPsyYJmZvQ3sRTAlSZpB\ngwat/VxRUUFFRUXEMCRuH06ZzY33vlTrtqfvPB+znDxCFZE6VFZWUllZGcuxsy2gtOZNqKuA74AR\nBHNJnQy0dPer6zy42UbANIJO7/nAOKCvu09JabMHQWd6T6AJMBY42d0/qXYsdXoXqAsGDePr7xbX\nqB94bk8677lT/gMSkbXy1ek9gSBBrDnR+SnbHKgzYbj7KjO7CBjFutdqp5jZ+cFmv9/dp5rZawQT\nGq4C7q+eLKQwVVWtos/lD9S6bfht59C4UZQbWBEpFppLStZLpregttt6M+7+Xd8EIhKR2uR7LqlG\nwC+Bn4ZVlcB97l6VcScpaf834i1GvzelRv21F/Zir91bJxCRiORDlIF7DxKMwF4zW9xpwCp3Pyfm\n2KrHoTuMhGUbiPf4rWfTpHGjPEckInXJ9xKtH7n7XnXVxU0JI1nZ5oLSW1AihSvfc0mtMrN27v5Z\nePJdCDqnpUx89sXXXHl7zf6KM4/pyi+6d0wgIhFJQpSEcQUwxsxmErwx1RboH2tUUjCGvzSOp0dN\nrFH/l2v6se1WLRKISESSkjVhhJMHLgV2BXYPq6e5+/K4A5Pk9bnsAapW1ryZ1Gp4IuUpSh/Gh+6+\nT57iyRaH+jDyZPXq1Zz4m/tr3ab+CpHikss+jCgLEbxhZsebfkqUhWXLq2pNFr2778Uzd12gZCFS\nxqLcYSwmmBRwJbCMoB/D3T2vD7B1hxG/Bd8u5pfXD6tRf8PFvenQfvsEIhKRDZXv9TCa5+JEUtg+\nmjaHG+55sUa9ZpkVkTUyJgwz2wb4LdCeYJ6nm939v/kKTPLnb29MYujI92vUq3NbRFJlm632VYIJ\nCN8GegHN3f3M/IVWIx49korBzQ+8yvh/fl6jXp3bIqUhLyO9q4/mNrOJ7t4pFyddH0oYuXfaVQ/x\nw7IVaXWNGm7EiNvPTSgiEcm1vPVhmFlL1k1vvlFq2d2/zUUAkozjf31vjbpD9t2VS0//WQLRiEgx\nyHaH8TnBGt61ZSZ3911ijKu2eHSHkQOZJhDsf2xXelVomg+RUpPXyQcLhRLGhsuULH573hHs26Ft\nAhGJSNzyPfmglIBMo7dvu+IEdm69VQIRiUixUcIoAytXruLky2oupXrPtf1otaUmEBSRaJQwSlym\nZKEBeSJSX1HmksLMDjaz/uHnrc1s53jDklzIlCwevam/koWI1FuUuaSuA/YDdnf33cxse+Apdz8o\nHwGmxKFO73rIlCyG3nwWzTZunEBEIpKEfM9WeyzQG1gC4O7zAM0vVcBWrVpda7IYdsvZShYist6i\nJIwV4a/2DmBmm8QbkmwId+ekATXfhhp2y9k0bdIogYhEpFRESRhPmtl9wOZmdi4wGqj566skLtM4\ni78OPkvJQkQ2WKSBe2Z2GHA4wajv19z99bgDqyUG9WHUobbpPh67uT+bbNwkgWhEpBDkdaS3mQ0A\nnnD3ubk44fpSwsiutmTx8O/PoMWmGycQjYgUinx3ejcHRpnZ383sIjNrlYsTS+6cUEuyuG/QqUoW\nIpJTdSYMd7/e3TsAvwK2A94ys9GxRyaR3HDPi1S/77rz6pPZquWmicQjIqUr0sC90ALgS+AbYJt4\nwpH6GPHKeD6aNiet7oaLe9Nm25YJRSQipazOhGFmF5pZJfAGsCVwrrtrHuyEjf/n5zz16oS0uktO\nPZQO7bdPKCIRKXVR5pJqA1zq7pPiDkaimbtgITc/8GpaXe/ue9Gt824JRSQi5SDbAkot3P2/ZrZF\nbdvzveKe3pIKLFm6nNMHPpxWt0ubrbn18uMTikhEClm+1vR+0d17mdm/CUZ5p55QK+4lINPAvGfu\nuiCBaESkGGjFvTJV21gLJQsRySav4zDM7I0odRKv864bWqPuyT+el0AkIlKuMnZ6m1lToBmwlZm1\nZN0jqRbADnmITULPjf6QbxYuSat7+PdnsNFG9XkrWkRkw2T7iXM+MAHYI/x7zZ/ngbujnsDMeprZ\nVDObbmZXZWnX2cyqzOy4qMcuB7PmfcNfXxibVveHS4/RKG4Rybsoc0ld7O5/Xq+DmzUApgM/A+YB\n44E+7j61lnavA0uBh9z92VqOVXZ9GMtXVNHviiFpdScc3om+R3VJKCIRKTa57MOocxyGu//ZzPYE\nfgw0Tal/LMLxuwAz3H0WgJmNAI4GplZrdzHwNNA5YtxloXqyMFCyEJHE1JkwwiVaKwgSxsvAEcA7\nQJSEsQMwO6U8hyCJpB5/e+AYd+9uZvppGDrtqodq1D2tN6JEJEFRek1PIHik9KW79wf2AjbLYQx3\nAql9Gzm5dSpmo9+bwg/LVqTVDb/tnISiEREJRJkaZKm7rzazlWbWgmASwjYRjz8X2DGl3DqsS7Uf\nMMLMDNgKOMLMqtx9ZPWDDRo0aO3niooKKioqIoZRPL5dtIT/G/FWWt3tV55A40ZR/lOJSLmrrKyk\nsrIylmNH6fS+B/gt0Ae4DPgemBTebdS170bANII7lPnAOKCvu0/J0P5h4IVy7fSubSR3r24d6X9c\n14QiEpFil+9O7wvDj/ea2atAC3efHOXg7r7KzC4CRhE8/hri7lPM7Pxgs99ffZd6xF5yapv2Q8lC\nRApFtrmkOmXb0d0nxhJRBqV+h/Hm+1P5y/DKtLqn7zyf4EmdiMj6ydcdxu1ZtjlwaC4CEPj+h+U1\nksU91/ZTshCRgpIxYbh793wGUs7OuDp9uvLe3fei1ZYtEopGRKR2UcZhnF5bfcSBe1KHG+99qUbd\nGcccmEAkIiLZRXlXM3X0dVOCN54mEm3gnmQx+8vv+HDK7LS6Ebedm1A0IiLZRXlL6uLUspltDoyI\nLaIy4e5cetMTaXXXXdiLRo02SigiEZHs1md+7CXAzrkOpNycfU36DVqzpo3puHvrhKIREalblD6M\nF1g3PqIBwZxST8YZVKmb/vlXLFq8NK1u6OCzEopGRCSaKH0Yt6V8XgnMcvc5McVT8tydq+94Lq3u\nrt+enFA0IiLRRenDeAsgnEeqYfh5C3f/NubYStJ51/01rdyuzda0btUyoWhERKKL8kjqPOAGYBmw\nmmA2WQd2iTe00jNr3jd8uyh9qdVbLj8+oWhEROonyiOpK4A93f0/cQdTytydAYOfSqvToygRKSZR\n3pL6DPgh7kBK3S1DXksrb92yuR5FiUhRiXKHcTXwrpmNBZavqXT3S2KLqsQsXrKMcR9/nlb3f9f1\nSyYYEZH1FCVh3Ae8CXxM0Ich9XTmbx9JK193YS9NLCgiRSdKwmjk7gNij6REvTPh0xp1GqAnIsUo\nSh/GK2Z2npltZ2ZbrPkTe2QlwN2547HRaXWP33p2QtGIiGyYKHcYfcO/r06p02u1EVx+6zNp5V7d\nOtKkcaOEohER2TBRBu5p3qj1sHjJMj6fm/4mspZbFZFipvUwYlK9o/u2K05IJhARkRzRehgx+OeM\nuTXqdm69VQKRiIjkjrl73a1SdwjXw3D3nvGElPG8Xt9Yk3L8r+9NKw+9+Syabdw4oWhEpJyZGe6e\nk/f4tR5Gjj3/5kdp5b33aKNkISIlQeth5JC789jz76XV/e6CIxOKRkQkt7QeRg7d/kj6mIszjjlQ\nI7pFpGRkTBhm1h5otWY9jJT6g8ysibt/Fnt0RaSqahXvTUq/JL2775VQNCIiuZetD+NO4L+11P83\n3CYpBgxOf0p33YW9EopERCQe2RJGK3f/uHplWLdTbBEVoaXLVjDv60VpdZovSkRKTbaEsXmWbRvn\nOpBi1v9/Hk0r3zHwpIQiERGJT7aE8YGZnVu90szOASbEF1Jx+f6H5VStXJVWt+N2mptRREpPxoF7\nZtYKeA5YwboEsR/QGDjW3b/MS4Tr4inIgXvVB+ndc20/Wm3ZIqFoRETS5XLgXsa3pNz9K6CrmXUH\n9gyrX3L3N3Nx4lLw/Q/La9QpWYhIqar31CBJKcQ7jL6XP8iKqpVry/dedwpbb9E8wYhERNIlPTWI\nELwZlZosACULESlpShjr6Yrb0hdH+ss1/RKKREQkP5Qw1kNV1SrmVxt3se1W6rsQkdKmhLEebn1o\nVFr5j1dp3IWIlL7YE4aZ9TSzqWY23cyuqmV7PzP7KPzzjpn9JO6YNoS7M+GTWWl1bbfXuAsRKX2x\nJgwzawDcDfQAOgB9zWyPas1mAj91972AG4EH4oxpQw0d+X5a+YaLeycUiYhIfsV9h9EFmOHus9y9\nChgBHJ3awN3fd/c1HQLvAzvEHNMGqb5AUof22ycUiYhIfsWdMHYAZqeU55A9IZwDvBJrRBtg7OR/\np5XPOeHghCIREcm/KAso5UU4orw/kPGn8KBBg9Z+rqiooKKiIva4Ut0y5LW08hGH7JmhpYhIMior\nK6msrIzl2LGO9DazA4BB7t4zLA8E3N0HV2vXEXgG6JlpYaakR3rP/3oRF904fG35wL3bcXn/wxKL\nR0QkimIa6T0eaG9mbc2sMdAHGJnawMx2JEgWpxXyKn6X3fJ0WvnS0w5NKBIRkWTE+kjK3VeZ2UXA\nKILkNMTdp5jZ+cFmvx+4BtgCuMeCBbCr3L1LnHHV18qVq1i+omptedNmTWjYcKMEIxIRyT9NPhjB\n3Y+PYczYaWvLmsJcRIpFMT2SKgmpyQI0hbmIlCcljDp88tn8tPIlp6rvQkTKkxJGHa750/Np5W6d\nd0soEhGRZClhZLFseVVa+cfttksoEhGR5ClhZHHfk2+nlS/vf3hCkYiIJE8JI4u3P5iRVt6s+cYJ\nRSIikjwljAxmzv46rfxrDdQTkTKnhJHB/977clr5kH13TSgSEZHCoIRRC3fnv98vXVtu3aolwSB0\nEZHypYRRi8px09PKV57TI6FIREQKhxJGLe5+fExaeYdtNk8oEhGRwqGEUc2KqpVp5UP3r76irIhI\neVLCqGb4S+PTymcee2BCkYiIFBYljGpGjklfs3uTjZskFImISGFRwkiR+mYUwCm99k8oEhGRwqOE\nkWLoyLFp5d7dOyYUiYhI4VHCSPHm2KlpZa2qJyKyjhJGaNHi9MdRF/btllAkIiKFSQkjNOzF9MdR\n3bvsnlAkIiKFSQkj9Mb76Y+jGjTQpRERSaWfisCSpcvTyuef9NOEIhERKVxKGMDzb6SPvTh0fz2O\nEhGpTgkDeOb1iWllvR0lIlJT2SeMlStXpZX7HtUloUhERApb2SeMMeOmpZWPOKRDQpGIiBS2sk8Y\nDz37blpZc0eJiNSu7BNG6nTmWoZVRCSzsk4Y0z//Kq18Ys99E4pERKTwlXXCePLVD9LKWllPRCSz\nsk4YH06ZvfZzqy1bJBiJiEjhK9uEsXTZirTyab0PSCgSEZHiULYJ4/X3pqSVO+/ZNqFIRESKQ9km\njBEvp/dfaHS3iEh2ZZswlq+oWvv5sK4/SjASEZHiUJYJY+6ChWnlo7ppKVYRkbrEnjDMrKeZTTWz\n6WZ2VYY2fzKzGWY2ycz2jjum0e+m91+02bZl3KcUESl6sSYMM2sA3A30ADoAfc1sj2ptjgDaufuu\nwPnAvXHGBDByzLrpzJs1bRz36XKusrIy6RAKhq7FOroW6+haxCPuO4wuwAx3n+XuVcAI4OhqbY4G\nHgNw97HAZmbWKq6A3D2t3OfIznGdKjb6n2EdXYt1dC3W0bWIR8OYj78DMDulPIcgiWRrMzes+6pa\nO/5w3ysbHNCcr75LK3fdp90GH1NEpBzEnTByasIns3J+zJYtmuX8mCIipciqP6LJ6cHNDgAGuXvP\nsDwQcHcfnNLmXmCMuz8RlqcC3dz9q2rHii9QEZES5u6Wi+PEfYcxHmhvZm2B+UAfoG+1NiOBXwFP\nhAlmYfVkAbn7wiIisn5iTRjuvsrMLgJGEXSwD3H3KWZ2frDZ73f3l83sSDP7FFgC9I8zJhERWT+x\nPpISEZEcoYNBAAAG7ElEQVTSURQjvaMM/isVZtbazN40s3+Z2cdmdklY39LMRpnZNDN7zcw2S9nn\n6nDg4xQzOzy56ONhZg3MbKKZjQzLZXktzGwzM3sq/G7/MrP9y/ha/MbM/mlmk81smJk1LpdrYWZD\nzOwrM5ucUlfv725mncLrN93M7ox0cncv6D8ESe1ToC3QCJgE7JF0XDF+322BvcPPmwLTgD2AwcCV\nYf1VwM3h5x8DHxI8XtwpvFaW9PfI8TX5DfBXYGRYLstrATwC9A8/NwQ2K8drAWwPzAQah+UngDPK\n5VoABwN7A5NT6ur93YGxQOfw88tAj7rOXQx3GFEG/5UMd//S3SeFn78HpgCtCb7zo2GzR4Fjws+9\ngRHuvtLdPwdmUHOsS9Eys9bAkcCDKdVldy3MrAVwiLs/DBB+x0WU4bUIbQRsYmYNgY0Jxm+VxbVw\n93eA76pV1+u7m9m2QHN3Hx+2eyxln4yKIWHUNvhvh4RiySsz24ngN4n3gVYevj3m7l8C24TNMg18\nLBV3AFcAqZ1t5Xgtdgb+Y2YPh4/n7jezZpThtXD3ecDtwBcE32uRu4+mDK9Fim3q+d13IPhZukak\nn6vFkDDKkpltCjwN/Dq806j+dkLJv61gZkcBX4V3XNleqy75a0HwSKET8Bd370TwRuFAyvPfxeYE\nv1G3JXg8tYmZnUIZXossYvnuxZAw5gI7ppRbh3UlK7zNfhoY6u7Ph9VfrZljK7ydXBDWzwXapOxe\nStfnIKC3mc0EhgOHmtlQ4MsyvBZzgNnuvmblr2cIEkg5/rv4OTDT3b9191XAc0BXyvNarFHf775e\n16QYEsbawX9m1phg8N/IhGOK20PAJ+5+V0rdSODM8PMZwPMp9X3Ct0R2BtoD4/IVaJzc/bfuvqO7\n70Lw3/1Ndz8NeIHyuxZfAbPNbLew6mfAvyjDfxcEj6IOMLOmZmYE1+ITyutaGOl33fX67uFjq0Vm\n1iW8hqen7JNZ0j3+Ed8K6EnwttAMYGDS8cT8XQ8CVhG8DfYhMDH8/lsAo8PrMArYPGWfqwnefpgC\nHJ70d4jpunRj3VtSZXktgL0IfoGaBDxL8JZUuV6L68LvNZmgk7dRuVwL4HFgHrCcIHn2B1rW97sD\n+wIfhz9X74pybg3cExGRSIrhkZSIiBQAJQwREYlECUNERCJRwhARkUiUMEREJBIlDBERiUQJQwqa\nma02s1tTypeZ2bU5OvbDZnZcLo5Vx3lOMLNPzOyNavVtzaz6CpRRj/lObqITiU4JQwrdcuA4M9si\n6UBSmdlG9Wh+NnCOu/+sWv3OQL/1Ob67H1yP84vkhBKGFLqVwP3AgOobqt8hmNni8O9uZlZpZn8z\ns0/N7CYz62dmY83so3CKhDUOM7PxFizQdVS4fwMzuyVsP8nMzk057ttm9jzBtBzV4+kbLkgz2cxu\nCuuuIVi/YIiZDa62y03AweHss782szPM7PnwTmS0mW1iZqPN7IMw7t4ZvusYW7ew0tCUNjdbsMjQ\nJDO7pV5XXaQWsa7pLZIDDvwF+LiWH7i1tV2jI8HCUwsJFtt5wN33t2AFw4tZl4DauntnM2sPjDGz\ndgRz8SwM2zcG/mFmo8L2+wAd3P2L1BOb2XbAzeH2hcDrZtbb3f/XzA4FBrj7h9XiHQhc5u69w2Oc\nEe7/E3dfZGYNgGPc/Xsz25Jgmvs186ilfte9CRbK+TKMtSswNdx3j/DYLeq4diJ10h2GFDwPpnd/\nFPh1PXYb7+4L3H0F8BnB/DoQzJ2zU0q7J8NzfBq22wM4HDjdzD4kWJVsC2DXsP246ski1BkY48EM\nqquBYcBPU7Znm5491eseLIwEwf+fN5nZRwTzBG1vZtvUss84d5/vwTw/k8LvtwhYamYPmtmxwNKI\n5xfJSAlDisVdBH0Bm6TUrST8NxzOuNk4ZdvylM+rU8qrSb+zTv1N3cKyARe7+z7hn3YeLNADwToU\nmURNCtmkHv8UYCtgH3ffh2DK6qa17JP6XVcBDT2Y9rsLwTT5vYBXcxCblDklDCl0BuDu3xHcDZyd\nsu1zYL/w89EEM5bW14kWaEfQCT0NeA24MFyXBDPb1YLV7bIZB/zUzLYIO6z7ApV17LMYaJ5l+2bA\nAndfbWbdCRYMWiNrcgrj3dzdXyV4/NaxjlhE6qQ+DCl0qXcAtwO/Sql7AHg+fHT0Gpl/+882JfMX\nBD/smwPnu/sKM3uQ4LHOxPDOZQF1rHfs7l+a2UDWJYkX3f3FOs4/GVgdxv8INddpHga8ED6S+oBg\neuq6vtOa+hYE12bNHclvssUvEoWmNxcRkUj0SEpERCJRwhARkUiUMEREJBIlDBERiUQJQ0REIlHC\nEBGRSJQwREQkEiUMERGJ5P8Bzu3gnS9rJRgAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7faa0a78a650>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "cdf = Cdf(suite)\n",
    "thinkplot.Cdf(cdf)\n",
    "thinkplot.Config(xlabel='Number of trains',\n",
    "                 ylabel='Cumulative Probability',\n",
    "                 legend=False)"
>>>>>>> c09e7285de4dcdfd1011452d913f287800cd5c75
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
<<<<<<< HEAD
    "**Exercise:** Write a version of `node_clustering` that replaces the `for` loop with a list comprehension."
=======
    "`Cdf` also provides `Percentile`"
>>>>>>> c09e7285de4dcdfd1011452d913f287800cd5c75
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
<<<<<<< HEAD
       "0.5"
=======
       "(69, 869)"
>>>>>>> c09e7285de4dcdfd1011452d913f287800cd5c75
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
<<<<<<< HEAD
    "# Solution\n",
    "\n",
    "def node_clustering(G, u):\n",
    "    neighbors = G[u]\n",
    "    k = len(neighbors)\n",
    "    if k < 2:\n",
    "        return 0\n",
    "        \n",
    "    edges = [G.has_edge(v, w) for v, w in all_pairs(neighbors)]\n",
    "    return np.mean(edges)\n",
    "\n",
    "clustering_coefficient(lattice)"
=======
    "cdf.Percentile(5), cdf.Percentile(95)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Exercises"
>>>>>>> c09e7285de4dcdfd1011452d913f287800cd5c75
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
<<<<<<< HEAD
    "**Exercise:** What is the order of growth of `clustering_coefficient` in terms of `n`, `m`, and `k`?"
=======
    "**Exercise:** To write a likelihood function for the locomotive problem, we had\n",
    "to answer this question:  \"If the railroad has `N` locomotives, what\n",
    "is the probability that we see number 60?\"\n",
    "\n",
    "The answer depends on what sampling process we use when we observe the\n",
    "locomotive.  In this chapter, I resolved the ambiguity by specifying\n",
    "that there is only one train-operating company (or only one that we\n",
    "care about).\n",
    "\n",
    "But suppose instead that there are many companies with different\n",
    "numbers of trains.  And suppose that you are equally likely to see any\n",
    "train operated by any company.\n",
    "In that case, the likelihood function is different because you\n",
    "are more likely to see a train operated by a large company.\n",
    "\n",
    "As an exercise, implement the likelihood function for this variation\n",
    "of the locomotive problem, and compare the results."
>>>>>>> c09e7285de4dcdfd1011452d913f287800cd5c75
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
<<<<<<< HEAD
    "collapsed": false
=======
    "collapsed": true
>>>>>>> c09e7285de4dcdfd1011452d913f287800cd5c75
   },
   "outputs": [],
   "source": [
    "# Solution\n",
    "\n",
<<<<<<< HEAD
    "\"\"\"`clustering_coefficient` calls `node_clustering` once for each node.  \n",
    "`node_clustering` is quadratic in `k`, the number of neighbors.\n",
    "\n",
    "In a complete graph, `k = n-1`, so `node_clustering` is `O(n^2)` and \n",
    "`clustering_coefficient` is `O(n^3)`.\n",
    "\n",
    "But in a ring lattice, or any other graph where `k` is not proportional to `n`, \n",
    "`clustering_coefficient` is `O(k^2 n)`.\n",
    "\"\"\";"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Path length"
=======
    "# Suppose Company A has N trains and all other companies have M.\n",
    "# The chance that we would observe one of Company A's trains is $N/(N+M)$.\n",
    "# Given that we observe one of Company A's trains, the chance that we\n",
    "# observe number 60 is $1/N$ for $N \\ge 60$.\n",
    "\n",
    "# The product of these probabilities is $1/(N+M)$, which is just the\n",
    "# probability of observing any given train.\n",
    "\n",
    "# If N<<M, this converges to a constant, which means that all value of $N$\n",
    "# have the same likelihood, so we learn nothing about how many trains\n",
    "# Company A has.\n",
    "\n",
    "# If N>>M, this converges to $1/N$, which is what we saw in the previous\n",
    "# solution.\n",
    "\n",
    "# More generally, if M is unknown, we would need a prior distribution for\n",
    "# M, then we can do a two-dimensional update, and then extract the posterior\n",
    "# distribution for N.\n",
    "\n",
    "# We'll see how to do that soon."
>>>>>>> c09e7285de4dcdfd1011452d913f287800cd5c75
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
<<<<<<< HEAD
    "The following function computes path lengths between all pairs of nodes"
=======
    "**Exercise:** Suppose I capture and tag 10 rock hyraxes.  Some time later, I capture another 10 hyraxes and find that two of them are already tagged.  How many hyraxes are there in this environment?\n",
    "\n",
    "As always with problems like this, we have to make some modeling assumptions. \n",
    "\n",
    "1) For simplicity, you can assume that the environment is reasonably isolated, so the number of hyraxes does not change between observations.\n",
    "\n",
    "2) And you can assume that each hyrax is equally likely to be captured during each phase of the experiment, regardless of whether it has been tagged.  In reality, it is possible that tagged animals would avoid traps in the future, or possible that the same behavior that got them caught the first time makes them more likely to be caught again.  But let's start simple.\n",
    "\n",
    "I suggest the following notation:\n",
    "\n",
    "*  `N`: total population of hyraxes \n",
    "*  `K`: number of hyraxes tagged in the first round \n",
    "*  `n`: number of hyraxes caught in the second round\n",
    "*  `k`: number of hyraxes in the second round that had been tagged\n",
    "\n",
    "So `N` is the hypothesis and `(K, n, k)` make up the data.  The probability of the data, given the hypothesis, is the probability of finding `k` tagged hyraxes out of `n` if (in the population) `K` out of `N` are tagged. \n",
    "\n",
    "If you are familiar with the hypergeometric distribution, you can use the hypergeometric PMF to compute the likelihood function.  Otherwise, you can figure it out using combinatorics."
>>>>>>> c09e7285de4dcdfd1011452d913f287800cd5c75
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
<<<<<<< HEAD
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "def path_lengths(G):\n",
    "    length_map = nx.shortest_path_length(G)\n",
    "    lengths = [length_map[u][v] for u, v in all_pairs(G)]\n",
    "    return lengths"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The characteristic path length is the mean path length for all pairs."
=======
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# Solution\n",
    "\n",
    "from scipy.special import binom\n",
    "\n",
    "class Hyrax(Suite):\n",
    "    \"\"\"Represents hypotheses about how many hyraxes there are.\"\"\"\n",
    "\n",
    "    def Likelihood(self, data, hypo):\n",
    "        \"\"\"Computes the likelihood of the data under the hypothesis.\n",
    "\n",
    "        hypo: total population (N)\n",
    "        data: # tagged (K), # caught (n), # of caught who were tagged (k)\n",
    "        \"\"\"\n",
    "        N = hypo\n",
    "        K, n, k = data\n",
    "\n",
    "        if hypo < K + (n - k):\n",
    "            return 0\n",
    "\n",
    "        like = binom(N-K, n-k) / binom(N, n)\n",
    "        return like"
>>>>>>> c09e7285de4dcdfd1011452d913f287800cd5c75
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "collapsed": false
   },
<<<<<<< HEAD
   "outputs": [],
   "source": [
    "def characteristic_path_length(G):\n",
    "    return np.mean(path_lengths(G))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "On a complete graph, the average path length should be 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1.0"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "complete = nx.complete_graph(10)\n",
    "characteristic_path_length(complete)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "On a ring lattice with `n=1000` and `k=10`, the mean is about 50"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "50.450450450450454"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lattice = make_ring_lattice(1000, 10)\n",
    "characteristic_path_length(lattice)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Exercise:**  What is the mean path length in a ring lattice with `n=10` and `k=4`?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1.6666666666666667"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Solution\n",
    "\n",
    "lattice = make_ring_lattice(10, 4)\n",
    "characteristic_path_length(lattice)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## The experiment"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This function generates a WS graph with the given parameters and returns a pair of (mean path length, clustering coefficient):"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def run_one_graph(n, k, p):\n",
    "    \"\"\"Makes a WS graph and computes its stats.\n",
    "    \n",
    "    n: number of nodes\n",
    "    k: degree of each node\n",
    "    p: probability of rewiring\n",
    "    \n",
    "    returns: tuple of (mean path length, clustering coefficient)\n",
    "    \"\"\"\n",
    "    ws = make_ws_graph(n, k, p)    \n",
    "    mpl = characteristic_path_length(ws)\n",
    "    cc = clustering_coefficient(ws)\n",
    "    print(mpl, cc)\n",
    "    return mpl, cc"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "With `n=1000` and `k=10`, it takes about a second on my computer:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "8.28667867868 0.644182539683\n",
      "CPU times: user 1.14 s, sys: 16 ms, total: 1.15 s\n",
      "Wall time: 1.15 s\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "(8.2866786786786779, 0.6441825396825398)"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "%time run_one_graph(1000, 10, 0.01)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we'll run it with a range of values for `p`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[  1.00000000e-04   3.16227766e-04   1.00000000e-03   3.16227766e-03\n",
      "   1.00000000e-02   3.16227766e-02   1.00000000e-01   3.16227766e-01\n",
      "   1.00000000e+00]\n"
     ]
    }
   ],
   "source": [
    "ps = np.logspace(-4, 0, 9)\n",
    "print(ps)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This function runs each value of `p` 20 times and returns a dictionary that maps from each `p` to a list of (mpl, cc) pairs."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def run_experiment(ps, n=1000, k=10, iters=20):\n",
    "    \"\"\"Computes stats for WS graphs with a range of `p`.\n",
    "    \n",
    "    ps: sequence of `p` to try\n",
    "    n: number of nodes\n",
    "    k: degree of each node\n",
    "    iters: number of times to run for each `p`\n",
    "    \n",
    "    returns: sequence of (mpl, cc) pairs\n",
    "    \"\"\"\n",
    "    res = {}\n",
    "    for p in ps:\n",
    "        print(p)\n",
    "        res[p] = []\n",
    "        for _ in range(iters):\n",
    "            res[p].append(run_one_graph(n, k, p))\n",
    "    return res"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Here are the raw results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.0001\n",
      "40.5586446446 0.666423232323\n",
      "50.4504504505 0.666666666667\n",
      "50.4504504505 0.666666666667\n",
      "42.5435135135 0.666423232323\n",
      "50.4504504505 0.666666666667\n",
      "47.2872632633 0.666278787879\n",
      "50.4504504505 0.666666666667\n",
      "49.82804004 0.666351010101\n",
      "40.1102762763 0.666134343434\n",
      "50.4504504505 0.666666666667\n",
      "50.4504504505 0.666666666667\n",
      "50.4504504505 0.666666666667\n",
      "50.4504504505 0.666666666667\n",
      "39.6356356356 0.665963131313\n",
      "37.9293013013 0.666107575758\n",
      "50.4211191191 0.666384848485\n",
      "50.4504504505 0.666666666667\n",
      "39.8014494494 0.666351010101\n",
      "50.4504504505 0.666666666667\n",
      "50.4504504505 0.666666666667\n",
      "0.000316227766017\n",
      "38.53002002 0.666423232323\n",
      "32.7859279279 0.665141919192\n",
      "36.9473093093 0.665890909091\n",
      "26.7532292292 0.665503030303\n",
      "36.4936216216 0.665746464646\n",
      "34.7754554555 0.665674242424\n",
      "41.8450750751 0.666278787879\n",
      "45.4095435435 0.665963131313\n",
      "33.5735475475 0.665963131313\n",
      "38.6045785786 0.666423232323\n",
      "32.2358298298 0.665042929293\n",
      "33.3399079079 0.665746464646\n",
      "38.742980981 0.666278787879\n",
      "45.4724864865 0.666134343434\n",
      "43.0307207207 0.665818686869\n",
      "35.9812352352 0.665286363636\n",
      "43.4174854855 0.666206565657\n",
      "37.7342762763 0.665746464646\n",
      "46.0405485485 0.666134343434\n",
      "46.0505105105 0.666423232323\n",
      "0.001\n",
      "27.7864684685 0.664871717172\n",
      "24.6398518519 0.664799494949\n",
      "18.7396436436 0.663478282828\n",
      "25.9586186186 0.665331818182\n",
      "24.3383303303 0.663346969697\n",
      "18.0388908909 0.663396464646\n",
      "27.0837257257 0.665115151515\n",
      "24.6775255255 0.663872727273\n",
      "29.0646966967 0.664438383838\n",
      "34.9572032032 0.666035353535\n",
      "21.5013433433 0.664312626263\n",
      "25.2706966967 0.664411616162\n",
      "29.818018018 0.665430808081\n",
      "23.4177557558 0.664586868687\n",
      "23.8585425425 0.664483838384\n",
      "28.9063443443 0.66478989899\n",
      "40.5522542543 0.666134343434\n",
      "44.1523723724 0.665602020202\n",
      "31.1422802803 0.665746464646\n",
      "28.1193713714 0.665119191919\n",
      "0.00316227766017\n",
      "13.7585025025 0.660161111111\n",
      "14.1674074074 0.660158585859\n",
      "15.961005005 0.661840909091\n",
      "12.7125325325 0.659434848485\n",
      "13.8144124124 0.660335858586\n",
      "14.8165685686 0.660337373737\n",
      "14.4420920921 0.659688383838\n",
      "17.7547887888 0.662274242424\n",
      "18.9154794795 0.662943434343\n",
      "22.0506386386 0.663584343434\n",
      "14.0508068068 0.659698268398\n",
      "14.3872112112 0.661553030303\n",
      "14.6731391391 0.660599494949\n",
      "17.1154594595 0.660761111111\n",
      "15.4829369369 0.661070707071\n",
      "14.1782002002 0.659970707071\n",
      "16.691967968 0.660698484848\n",
      "16.7564104104 0.661712121212\n",
      "16.6828128128 0.661172222222\n",
      "22.0831351351 0.664027777778\n",
      "0.01\n",
      "7.94924124124 0.642767893218\n",
      "7.41195195195 0.636379220779\n",
      "8.30648248248 0.644100505051\n",
      "9.14506706707 0.64924047619\n",
      "9.55673473473 0.651118398268\n",
      "9.27238238238 0.65089040404\n",
      "9.202996997 0.650634343434\n",
      "9.10661661662 0.647988888889\n",
      "8.74576976977 0.645935353535\n",
      "8.17841641642 0.643288383838\n",
      "8.59216016016 0.646182323232\n",
      "9.75182782783 0.651079292929\n",
      "9.37321921922 0.649564646465\n",
      "9.03027827828 0.649347474747\n",
      "8.22616416416 0.643938383838\n",
      "8.46542342342 0.644840548341\n",
      "8.88043243243 0.647848556999\n",
      "9.74309309309 0.650966666667\n",
      "8.80825625626 0.648208585859\n",
      "9.64831631632 0.649908585859\n",
      "0.0316227766017\n",
      "6.11442642643 0.611022366522\n",
      "6.11675275275 0.613766522367\n",
      "6.10184384384 0.61326010101\n",
      "6.24571971972 0.614634565435\n",
      "5.86585785786 0.602318686869\n",
      "6.11104904905 0.615534415584\n",
      "5.83940540541 0.602022083472\n",
      "5.79468668669 0.60076962482\n",
      "5.97145545546 0.607812049062\n",
      "6.17858658659 0.613374875125\n",
      "5.83064464464 0.600287806638\n",
      "6.20215215215 0.615854329004\n",
      "5.96404604605 0.608788023088\n",
      "6.13391791792 0.611916594517\n",
      "5.97401001001 0.609757004107\n",
      "5.65809409409 0.595604406704\n",
      "5.98284884885 0.61006991342\n",
      "5.82743543544 0.603680796981\n",
      "5.96214414414 0.605206721057\n",
      "6.03851651652 0.608909268509\n",
      "0.1\n",
      "4.44532332332 0.489386075036\n",
      "4.49746746747 0.496492840493\n",
      "4.41662262262 0.490932628483\n",
      "4.422 0.48686978022\n",
      "4.48292292292 0.496342823843\n",
      "4.39402602603 0.483246758797\n",
      "4.47626426426 0.494813086913\n",
      "4.36029029029 0.476456293706\n",
      "4.42111711712 0.488504234654\n",
      "4.41432632633 0.488638927739\n",
      "4.37075875876 0.479999300699\n",
      "4.50503103103 0.500273393273\n",
      "4.47015815816 0.494144766345\n",
      "4.41160760761 0.488906487956\n",
      "4.44264864865 0.493972716173\n",
      "4.38081481481 0.483101098901\n",
      "4.48897697698 0.494966877567\n",
      "4.41375375375 0.483985281385\n",
      "4.40797997998 0.486352131202\n",
      "4.49547147147 0.501128416028\n",
      "0.316227766017\n",
      "3.57676276276 0.220133899434\n",
      "3.5777957958 0.215841930292\n",
      "3.57908708709 0.217143992119\n",
      "3.59858658659 0.224586393345\n",
      "3.5928028028 0.226632312132\n",
      "3.57903503504 0.222349757759\n",
      "3.56253853854 0.211611098052\n",
      "3.56825625626 0.211241508492\n",
      "3.58766566567 0.223909174159\n",
      "3.57221221221 0.218541669442\n",
      "3.56832032032 0.218945215895\n",
      "3.57639439439 0.222114321789\n",
      "3.57411611612 0.217903860029\n",
      "3.57831831832 0.21715890025\n",
      "3.56686086086 0.21373023088\n",
      "3.58607207207 0.225133411033\n",
      "3.57563363363 0.214499456099\n",
      "3.58185585586 0.220913400488\n",
      "3.57861261261 0.220511588412\n",
      "3.57674874875 0.216319072594\n",
      "1.0\n",
      "3.26872272272 0.00985587549705\n",
      "3.26679479479 0.00931474473239\n",
      "3.26715115115 0.00989869411634\n",
      "3.26874874875 0.00972542359601\n",
      "3.26712512513 0.00886744105568\n",
      "3.26705905906 0.00818675638087\n",
      "3.2667967968 0.00984590246355\n",
      "3.26779379379 0.00934459629638\n",
      "3.26861661662 0.00877262349793\n",
      "3.26913113113 0.00956496314143\n",
      "3.26543743744 0.00704125339745\n",
      "3.26532532533 0.00866708569209\n",
      "3.26608408408 0.00869958440253\n",
      "3.26494094094 0.00919368882751\n",
      "3.26853653654 0.00951017467225\n",
      "3.26910710711 0.00991274334541\n",
      "3.26930530531 0.00985792361234\n",
      "3.26687887888 0.00770162705372\n",
      "3.26468868869 0.00917260950264\n",
      "3.26704104104 0.00911684622567\n"
     ]
    }
   ],
   "source": [
    "res = run_experiment(ps)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we have to extract them in a form we can plot"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[47.153509909909921, 38.38821451451453, 27.601196696696697, 16.024775375375377, 8.8697415415415399, 5.9956796796796796, 4.435878078078078, 3.577883783783784, 3.2672642642642642]\n",
      "[0.66648752525252497, 0.66589131313131311, 0.66476520202020184, 0.66110115079365073, 0.64721144660894658, 0.60822950771450768, 0.48992569597069602, 0.21896105963480963, 0.0091125278754613098]\n"
     ]
    }
   ],
   "source": [
    "L = []\n",
    "C = []\n",
    "for p, t in sorted(res.items()):\n",
    "    mpls, ccs = zip(*t)\n",
    "    mpl = np.mean(mpls)\n",
    "    cc = np.mean(ccs)\n",
    "    L.append(mpl)\n",
    "    C.append(cc)\n",
    "    \n",
    "print(L)\n",
    "print(C)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "And normalize them so they both start at 1.0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "L = np.array(L) / L[0]\n",
    "C = np.array(C) / C[0]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Here's the plot that replicates Watts and Strogatz's Figure 2."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\nb37zGxYsWMDYsWP55z//ydy5c3njjTfYs6f+uOdDhgwhOzub3NzGb8JYsWIFV155ZYtrT09PRynF\noEGD6k3Pz88nIiKiQfuoqKja+XUNGTIEq9XKzz//3OKaQoMt3POXSfToHMvshe+TlXOsxcsU/sli\nMjLlvM68nZ7drk6uuhTuSqmJSqkdSqldSqm7ncyfpZTaqpTaqJT6XCnl/Q8l9DI5OTnExsY6naeU\n4uqrr6437dprr6WyspIffvih3vSaZeTk5Jxxfenp6eTm5nL55Ze3oGrqrevU+rXWTk8k69Pc6xAb\nG4vWutHaXWUwGJg2eQRTf3Muc59aQfrGxq9WEsKZoV0j6BAcQNr29vOUsEbDXSllAJ4CJgD9gKlK\nqZRTmv0MnK21Hgy8Dzzs7kJ9XXl5ORbL6ccsj4+Pd/r+4MH6d2gGBQUBUFZ25udCLl++nHPOOYek\npKTmlFtPTd//qfVHRUVRUNBwqN6aaTVH8DVcrb2pRp1zFv/+6294Zdl3vP3pBhl4TDSZUoqpIzrz\n8cZDFJW1j3GNXDlyHwbs1lpnaa1twBJgct0GWuu1Wuuajs11gHeOeO/FoqOjnQZhjby8PKfvO3as\nv6lrujpiYmLOuL7ly5dzxRVXNKfUBmq6kk6tv1+/flRUVDS4vn/r1q0opejbt2+96a7W3hw9usSy\n4K6r+HX3QR568TNKy1rWry/8T2JEEOefFc17P7SPk6uuhHtHILvO+wOcObz/DKxsSVH+KCUlhezs\nbKePldNa884779Sb9vbbb2M0Ghk2bFi96fv27cNsNtOtW7fTrmvHjh3s2rXLbeGekpKC1rpBiE+c\nOJGAgADefPPNetMXL15M//79SU5OblC7UorevXu7pa5TRYQFc+/fLyMiPIh/PLaMnMOFrbIe4bsu\nG5zE9pwi9uYVe7qURplcaOPs7hunf9cqpa4DzgZGt6QoX6S1ZuXKlSQkJNSb3qFDB8aOHcuoUaOY\nN28emzdvbnCXJ8Cnn37K7NmzGT9+POvXr+e+++7j+uuvp2fP+mNfrF+/nnPPPRez2XzaWj788EN6\n9uxJnz59XK7/xx9/pEOHDg2mT548mWHDhmGxWPjhhx8YOXJk7bzY2FhmzZrF/PnzCQ0NZejQoSxZ\nsoS0tDQ++uijBstav349HTt2pGvXri7X1VQmk5G/ThnNZ99u5Z7/LWfmdReTFGXmxdeXkne0iPiY\n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\nAAAASUVORK5CYII=\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7fe7fe9f7f98>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "thinkplot.plot(ps, L, style='o-', linewidth=1)\n",
    "thinkplot.plot(ps, C, style='s-', linewidth=1)\n",
    "thinkplot.text(0.001, 0.9, 'C(p) / C(0)')\n",
    "thinkplot.text(0.0005, 0.25, 'L(p) / L(0)')\n",
    "thinkplot.config(xlabel='p', xscale='log',\n",
    "                 xlim=[0.00009, 1.1], ylim=[-0.01, 1.01])\n",
    "plt.savefig('chap03-3.pdf')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Breadth-first search"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now let's see how the shortest path algorithm works.  We'll start with BFS, which is the basis for Dijkstra's algorithm.\n",
    "\n",
    "Here's our old friend, the ring lattice:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "lattice = make_ring_lattice(10, 4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7fe7fe960cf8>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "nx.draw_circular(lattice, \n",
    "                 node_color=COLORS[2], \n",
    "                 node_size=1000, \n",
    "                 with_labels=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "And here's my implementation of BFS using a deque."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "from collections import deque\n",
    "\n",
    "def reachable_nodes_bfs(G, start):\n",
    "    \"\"\"Finds reachable nodes by BFS.\n",
    "    \n",
    "    G: graph\n",
    "    start: node to start at\n",
    "    \n",
    "    returns: set of reachable nodes\n",
    "    \"\"\"\n",
    "    seen = set()\n",
    "    queue = deque([start])\n",
    "    while queue:\n",
    "        node = queue.popleft()\n",
    "        if node not in seen:\n",
    "            seen.add(node)\n",
    "            queue.extend(G.neighbors(node))\n",
    "    return seen"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "It works:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "reachable_nodes_bfs(lattice, 0)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Here's a version that's a little faster, but maybe less readable."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def reachable_nodes_bfs(G, start):\n",
    "    \"\"\"Finds reachable nodes by BFS.\n",
    "    \n",
    "    G: graph\n",
    "    start: node to start at\n",
    "    \n",
    "    returns: set of reachable nodes\n",
    "    \"\"\"\n",
    "    seen = set()\n",
    "    queue = deque([start])\n",
    "    while queue:\n",
    "        node = queue.popleft()\n",
    "        if node not in seen:\n",
    "            seen.add(node)\n",
    "            neighbors = set(G[node]) \n",
    "            neighbors -= seen\n",
    "            queue.extend(neighbors)\n",
    "    return seen"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "It works, too."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "reachable_nodes_bfs(lattice, 0)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Dijkstra's algorithm"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we're ready for Dijkstra's algorithm, at least for graphs where all the edges have the same weight/length."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def shortest_path_dijkstra(G, start):\n",
    "    \"\"\"Finds shortest paths from `start` to all other nodes.\n",
    "    \n",
    "    G: graph\n",
    "    start: node to start at\n",
    "    \n",
    "    returns: make from node to path length\n",
    "    \"\"\"\n",
    "    dist = {start: 0}\n",
    "    queue = deque([start])\n",
    "    while queue:\n",
    "        node = queue.popleft()\n",
    "        new_dist = dist[node] + 1\n",
    "\n",
    "        neighbors = set(G[node]) - set(dist)\n",
    "        for n in neighbors:\n",
    "            dist[n] = new_dist\n",
    "        \n",
    "        queue.extend(neighbors)\n",
    "    return dist"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Again, we'll test it on a ring lattice."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "lattice = make_ring_lattice(10, 4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7fe7fe969278>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "nx.draw_circular(lattice, \n",
    "                 node_color=COLORS[3], \n",
    "                 node_size=1000, \n",
    "                 with_labels=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Here's my implementation:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{0: 0, 1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 2, 7: 2, 8: 1, 9: 1}"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "d1 = shortest_path_dijkstra(lattice, 0)\n",
    "d1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "And here's the result from NetworkX:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{0: 0, 1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 2, 7: 2, 8: 1, 9: 1}"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "d2 = nx.shortest_path_length(lattice, 0)\n",
    "d2"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "They are the same:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {
    "collapsed": false
   },
=======
>>>>>>> c09e7285de4dcdfd1011452d913f287800cd5c75
   "outputs": [
    {
     "data": {
      "text/plain": [
<<<<<<< HEAD
       "True"
      ]
     },
     "execution_count": 44,
=======
       "0.0010248876709531896"
      ]
     },
     "execution_count": 21,
>>>>>>> c09e7285de4dcdfd1011452d913f287800cd5c75
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
<<<<<<< HEAD
    "d1 == d2"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "**Exercise:** In a ring lattice with `n=1000` and `k=10`, which node is farthest from 0 and how far is it?  Use `shortest_path_dijkstra` to check your answer.\n",
    "\n",
    "Note: the maximum distance between two nodes is the **diameter** of the graph."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(504, 100)"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Solution\n",
    "\n",
    "lattice = make_ring_lattice(1000, 10)\n",
    "d = shortest_path_dijkstra(lattice, 0)\n",
    "\n",
    "from operator import itemgetter\n",
    "node, dist = sorted(d.items(), key=itemgetter(1))[-1]\n",
    "node, dist"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Exercises"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Exercise:** In a ring lattice, every node has the same number of neighbors.  The number of neighbors is called the **degree** of the node, and a graph where all nodes have the same degree is called a **regular graph**.\n",
    "\n",
    "All ring lattices are regular, but not all regular graphs are ring lattices.  In particular, if `k` is odd, we can't construct a ring lattice, but we might be able to construct a regular graph.\n",
    "\n",
    "Write a function called `make_regular_graph` that takes `n` and `k` and returns a regular graph that contains `n` nodes, where every node has `k` neighbors.  If it's not possible to make a regular graph with the given values of `n` and `k`, the function should raise a `ValueError`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# Solution\n",
    "\n",
    "# Here's `adjacent_edges` again for comparison:\n",
    "\n",
    "def adjacent_edges(nodes, halfk):\n",
    "    n = len(nodes)\n",
    "    for i, u in enumerate(nodes):\n",
    "        for j in range(i+1, i+halfk+1):\n",
    "            v = nodes[j % n]\n",
    "            yield u, v"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# Solution\n",
    "\n",
    "# And here's a function that computes edges that connect each\n",
    "# node to the one half-way around the circle\n",
    "\n",
    "def opposite_edges(nodes):\n",
    "    \"\"\"Enumerates edges that connect opposite nodes.\"\"\"\n",
    "    n = len(nodes)\n",
    "    for i, u in enumerate(nodes):\n",
    "        j = i + n//2\n",
    "        v = nodes[j % n]\n",
    "        yield u, v"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# Solution\n",
    "\n",
    "# Now we can make regular graphs.\n",
    "\n",
    "def make_regular_graph(n, k):\n",
    "    \"\"\"Makes graph with `n` nodes where all nodes have `k` neighbors.\n",
    "    \n",
    "    Not possible if both `n` and `k` are odd.\n",
    "    \"\"\"\n",
    "    # a is the number of adjacent edges\n",
    "    # b is the number of opposite edges (0 or 1)\n",
    "    a, b = divmod(k, 2)\n",
    "    \n",
    "    G = nx.Graph()\n",
    "    nodes = range(n)\n",
    "    G.add_nodes_from(nodes)\n",
    "    G.add_edges_from(adjacent_edges(nodes, a))\n",
    "    \n",
    "    # if k is odd, add opposite edges\n",
    "    if b:\n",
    "        if n%2:\n",
    "            msg = \"Can't make a regular graph if n and k are odd.\"\n",
    "            raise ValueError(msg)\n",
    "        G.add_edges_from(opposite_edges(nodes))\n",
    "    return G"
=======
    "# Solution\n",
    "\n",
    "hypos = range(1, 1000)\n",
    "suite = Hyrax(hypos)\n",
    "\n",
    "data = 10, 10, 2\n",
    "suite.Update(data)"
>>>>>>> c09e7285de4dcdfd1011452d913f287800cd5c75
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 63,
=======
   "execution_count": 22,
>>>>>>> c09e7285de4dcdfd1011452d913f287800cd5c75
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
<<<<<<< HEAD
      "image/png": "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\nYII=\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7fe7fe75e550>"
=======
      "image/png": "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\nYII=\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7faa0a6f6290>"
>>>>>>> c09e7285de4dcdfd1011452d913f287800cd5c75
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Solution\n",
    "\n",
<<<<<<< HEAD
    "# Here's an example.\n",
    "\n",
    "regular = make_regular_graph(10, 5)\n",
    "\n",
    "nx.draw_circular(regular, \n",
    "                 node_color=COLORS[4], \n",
    "                 node_size=1000, \n",
    "                 with_labels=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "**Exercise:** My implementation of `reachable_nodes_bfs` is efficient in the sense that it is in $O(n + m)$, but it incurs a lot of overhead adding nodes to the queue and removing them.  NetworkX provides a simple, fast implementation of BFS, available from [the NetworkX repository on GitHub](https://github.com/networkx/networkx/blob/master/networkx/algorithms/components/connected.py).\n",
    "\n",
    "Here is a version I modified to return a set of nodes:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "def plain_bfs(G, source):\n",
    "    \"\"\"A fast BFS node generator\"\"\"\n",
    "    seen = set()\n",
    "    nextlevel = {source}\n",
    "    while nextlevel:\n",
    "        thislevel = nextlevel\n",
    "        nextlevel = set()\n",
    "        for v in thislevel:\n",
    "            if v not in seen:\n",
    "                seen.add(v)\n",
    "                nextlevel.update(G[v])\n",
    "    return seen"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Compare this function to `reachable_nodes_bfs` and see which is faster.  Then see if you can modify this function to implement a faster version of `shortest_path_dijkstra`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# Solution\n",
    "\n",
    "lattice = make_ring_lattice(1000, 10)"
=======
    "thinkplot.Pdf(suite)\n",
    "thinkplot.Config(xlabel='Number of hyraxes', ylabel='PMF', legend=False)"
>>>>>>> c09e7285de4dcdfd1011452d913f287800cd5c75
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 52,
=======
   "execution_count": 23,
>>>>>>> c09e7285de4dcdfd1011452d913f287800cd5c75
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
<<<<<<< HEAD
      "100 loops, best of 3: 6.35 ms per loop\n"
=======
      "Posterior mean 185.570957948\n",
      "Maximum a posteriori estimate 50\n",
      "90% credible interval (36, 618)\n"
>>>>>>> c09e7285de4dcdfd1011452d913f287800cd5c75
     ]
    }
   ],
   "source": [
    "# Solution\n",
    "\n",
<<<<<<< HEAD
    "%timeit len(reachable_nodes_bfs(lattice, 0))"
=======
    "print('Posterior mean', suite.Mean())\n",
    "print('Maximum a posteriori estimate', suite.MaximumLikelihood())\n",
    "print('90% credible interval', suite.CredibleInterval(90))"
>>>>>>> c09e7285de4dcdfd1011452d913f287800cd5c75
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 53,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1000 loops, best of 3: 794 µs per loop\n"
     ]
    }
   ],
   "source": [
    "# Solution\n",
    "\n",
    "%timeit len(plain_bfs(lattice, 0))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {
    "collapsed": true
   },
=======
   "execution_count": 24,
   "metadata": {
    "collapsed": false
   },
>>>>>>> c09e7285de4dcdfd1011452d913f287800cd5c75
   "outputs": [],
   "source": [
    "# Solution\n",
    "\n",
<<<<<<< HEAD
    "\"\"\"\n",
    "The version from NetworkX is substantially faster!\n",
    "\n",
    "Here's a version of Dijkstra's algorithm that works the same way:\n",
    "\"\"\";"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "# Solution\n",
    "\n",
    "def plain_shortest_path(G, source):\n",
    "    \"\"\"A fast version of Dijkstra's algorithm for equal edges.\"\"\"\n",
    "    new_dist = 0\n",
    "    dist = {}\n",
    "    nextlevel = {source}\n",
    "    while nextlevel:\n",
    "        thislevel = nextlevel\n",
    "        nextlevel = set()\n",
    "        for v in thislevel:\n",
    "            if v not in dist:\n",
    "                dist[v] = new_dist\n",
    "                nextlevel.update(G[v])\n",
    "        new_dist += 1\n",
    "    return dist"
=======
    "from scipy import stats\n",
    "\n",
    "class Hyrax2(Suite):\n",
    "    \"\"\"Represents hypotheses about how many hyraxes there are.\"\"\"\n",
    "\n",
    "    def Likelihood(self, data, hypo):\n",
    "        \"\"\"Computes the likelihood of the data under the hypothesis.\n",
    "\n",
    "        hypo: total population (N)\n",
    "        data: # tagged (K), # caught (n), # of caught who were tagged (k)\n",
    "        \"\"\"\n",
    "        N = hypo\n",
    "        K, n, k = data\n",
    "\n",
    "        if hypo < K + (n - k):\n",
    "            return 0\n",
    "\n",
    "        like = stats.hypergeom.pmf(k, N, K, n)\n",
    "        return like"
>>>>>>> c09e7285de4dcdfd1011452d913f287800cd5c75
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 56,
=======
   "execution_count": 25,
>>>>>>> c09e7285de4dcdfd1011452d913f287800cd5c75
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
<<<<<<< HEAD
       "True"
      ]
     },
     "execution_count": 56,
=======
       "0.046119945192892968"
      ]
     },
     "execution_count": 25,
>>>>>>> c09e7285de4dcdfd1011452d913f287800cd5c75
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Solution\n",
    "\n",
<<<<<<< HEAD
    "#It gets the right answers\n",
    "\n",
    "lattice = make_ring_lattice(1000, 10)\n",
    "d1 = shortest_path_dijkstra(lattice, 0)\n",
    "d2 = plain_shortest_path(lattice, 0)\n",
    "d1 == d2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "100 loops, best of 3: 10.8 ms per loop\n"
     ]
    }
   ],
   "source": [
    "# Solution\n",
    "\n",
    "# And it is substantually faster than the version that uses a deque.\n",
    "\n",
    "%timeit shortest_path_dijkstra(lattice, 0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1000 loops, best of 3: 785 µs per loop\n"
     ]
    }
   ],
   "source": [
    "# Solution\n",
    "\n",
    "%timeit plain_shortest_path(lattice, 0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1000 loops, best of 3: 782 µs per loop\n"
     ]
    }
   ],
   "source": [
    "# Solution\n",
    "\n",
    "%timeit nx.shortest_path_length(lattice, 0)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Exercise:** The following implementation of a BFS contains two performance errors.  What are\n",
    "they?  What is the actual order of growth for this algorithm?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def bfs(top_node, visit):\n",
    "    \"\"\"Breadth-first search on a graph, starting at top_node.\"\"\"\n",
    "    visited = set()\n",
    "    queue = [top_node]\n",
    "    while len(queue):\n",
    "        curr_node = queue.pop(0)    # Dequeue\n",
    "        visit(curr_node)            # Visit the node\n",
    "        visited.add(curr_node)\n",
    "\n",
    "        # Enqueue non-visited and non-enqueued children\n",
    "        queue.extend(c for c in curr_node.children\n",
    "                     if c not in visited and c not in queue)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# Solution\n",
    "\n",
    "\"\"\"The first performance error is using `pop(0)` on a list, which is linear in\n",
    "the length of the list.  The second error is checking whether the children are \n",
    "in queue, which is also linear in the length of the list.  In the worst case, \n",
    "a completely connected graph, the queue loop runs `n` times, and each time we \n",
    "have to check `n` nodes to see if they are in a list with `n` elements, so the \n",
    "total run time is `O(n^3)`, which is really terrible.\n",
    "\n",
    "By the way, I did not make this example up.  It used to be on \n",
    "[the Wikipedia page for BFS](https://en.wikipedia.org/wiki/Breadth-first_search).\n",
    "In fact, if you search the Internet for Python implementations of BFS, many of \n",
    "them contain at least one performance error.\n",
    "\"\"\";"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Exercise:** In the book, I claimed that Dijkstra's algorithm does not work unless it uses BFS.  Write a version of `shortest_path_dijkstra` that uses DFS and test it on a few examples to see what goes wrong."
=======
    "hypos = range(1, 1000)\n",
    "suite = Hyrax2(hypos)\n",
    "\n",
    "data = 10, 10, 2\n",
    "suite.Update(data)"
>>>>>>> c09e7285de4dcdfd1011452d913f287800cd5c75
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 62,
=======
   "execution_count": 26,
>>>>>>> c09e7285de4dcdfd1011452d913f287800cd5c75
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
<<<<<<< HEAD
      "{0: 0, 1: 1, 2: 1, 3: 5, 4: 4, 5: 3, 6: 3, 7: 2, 8: 1, 9: 1}\n",
      "{0: 0, 1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 2, 7: 2, 8: 1, 9: 1}\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
=======
      "Posterior mean 185.570957948\n",
      "Maximum a posteriori estimate 50\n",
      "90% credible interval (36, 618)\n"
     ]
>>>>>>> c09e7285de4dcdfd1011452d913f287800cd5c75
    }
   ],
   "source": [
    "# Solution\n",
    "\n",
<<<<<<< HEAD
    "# Here's the broken version:\n",
    "\n",
    "def shortest_path_dfs(G, start):\n",
    "    dist = {start: 0}\n",
    "    queue = deque([start])\n",
    "    while queue:\n",
    "        node = queue.pop()\n",
    "        new_dist = dist[node] + 1\n",
    "\n",
    "        neighbors = set(G[node]) - set(dist)\n",
    "        for n in neighbors:\n",
    "            dist[n] = new_dist\n",
    "        \n",
    "        queue.extend(neighbors)\n",
    "    return dist\n",
    "\n",
    "#Sure enough, it gets the answers wrong\n",
    "\n",
    "lattice = make_ring_lattice(10, 4)\n",
    "d1 = shortest_path_dfs(lattice, 0)\n",
    "print(d1)\n",
    "d2 = nx.shortest_path_length(lattice, 0)\n",
    "print(d2)\n",
    "d1 == d2"
=======
    "print('Posterior mean', suite.Mean())\n",
    "print('Maximum a posteriori estimate', suite.MaximumLikelihood())\n",
    "print('90% credible interval', suite.CredibleInterval(90))"
>>>>>>> c09e7285de4dcdfd1011452d913f287800cd5c75
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
<<<<<<< HEAD
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
=======
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
>>>>>>> c09e7285de4dcdfd1011452d913f287800cd5c75
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
<<<<<<< HEAD
    "version": 3
=======
    "version": 2
>>>>>>> c09e7285de4dcdfd1011452d913f287800cd5c75
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
<<<<<<< HEAD
   "pygments_lexer": "ipython3",
   "version": "3.4.3"
=======
   "pygments_lexer": "ipython2",
   "version": "2.7.12+"
>>>>>>> c09e7285de4dcdfd1011452d913f287800cd5c75
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
